{"version":3,"file":"static/js/361.d51b8fda.chunk.js","mappings":"qNACA,EAA2B,2B,2BCA3B,EAAuB,6BAAvB,EAAwG,gCAAxG,EAAkJ,gC,SCyClJ,EAnCuB,SAACA,GAEtB,OAAiCC,EAAAA,EAAAA,GAAQC,EAAAA,IAAlCC,EAAW,EAAXA,YAAYC,EAAM,EAANA,OAAOC,EAAK,EAALA,MACpBC,GAAiBC,EAAAA,EAAAA,UACjBC,EAAYF,EAAeG,QAAQC,OAEzCC,EAAAA,EAAAA,YAAU,WAMV,GAAE,CAACP,EAAOC,IAEV,IAAMO,EAAoB,SAACC,GACzBA,EAAMC,iBAEPX,EAAY,CAACY,KAAKP,GACnB,EAGA,OACE,kBAAMQ,UAAWC,EAAcC,SAAUN,EAAkB,UAC/C,YAATR,IAAoB,gBAAKY,UAAU,WAAU,UAAC,SAACG,EAAA,QAAc,OAC9D,iBAAKH,UAAWC,EAAiBC,SAAUN,EAAkB,WAC3D,kBAAOQ,QAAQ,UAAS,2BACxB,qBAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAKjB,QAEvC,gBAAKU,UAAWC,EAAgB,UAC9B,mBAAQD,UAAU,MAAK,6BAI/B,ECdA,EArBiB,WACf,OAA8CQ,EAAAA,EAAAA,WAAS,GAAM,eAAtDC,EAAe,KAAEC,EAAkB,KAM1C,OACE,qBAASV,UAAWC,EAAiB,WACnC,2CACEQ,IACA,mBAAQT,UAAU,MAAMW,QARC,WAC7BD,GAAmB,EACrB,EAM8D,2BAIzDD,IAAmB,SAAC,EAAc,KACnC,yCAGN,ECvBA,EAAwB,gCCUxB,EATyB,SAACzB,GACxB,OACE,oBAAQgB,UAAWC,EAAc,WAC/B,uBAAIjB,EAAMe,QACV,gCAAaf,EAAM4B,WAGzB,EC8CA,EAhDmB,WAGhB,OAAmD3B,EAAAA,EAAAA,GAAQ4B,EAAAA,IAAe,GAApE1B,EAAW,EAAXA,YAAYC,EAAM,EAANA,OAAY0B,EAAW,EAAhBC,KAAiB1B,EAAK,EAALA,MAEpC2B,GAAOC,EAAAA,EAAAA,MAENC,EAASF,EAATE,QAOP,OALCvB,EAAAA,EAAAA,YAAU,WAEPR,EAAY+B,EACf,GAAE,CAAC/B,EAAY+B,IAEJ,YAAT9B,GAGA,gBAAKY,UAAU,WAAU,UACvB,SAACG,EAAA,QAAc,MAIjBd,GAGE,cAAGW,UAAU,WAAU,SAAEX,IAIxByB,EAAYf,MAQb,iCACA,SAAC,EAAgB,CAACA,KAAMe,EAAYf,KAAMa,OAAQE,EAAYF,UAC9D,gBAAKZ,UAAU,WAAU,UAAC,SAAC,KAAI,CAACA,UAAU,YAAYmB,GAAE,kBAAaH,EAAOE,QAAO,aAAY,8BAC/F,SAAC,KAAK,CAACE,KAAI,kBAAaJ,EAAOE,QAAO,aAAY,UACjD,SAAC,EAAQ,UATN,yCAcZ,C","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__9cxIN\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__C3cQf\",\"loading\":\"NewCommentForm_loading__aSq20\",\"control\":\"NewCommentForm_control__iR6jS\",\"actions\":\"NewCommentForm_actions__NC323\"};","import { useRef,useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport {addComment} from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n\n  const {sendRequest,status,error}=useHttp(addComment)\n  const commentTextRef = useRef();\n  const enteredText=commentTextRef.current.value\n\n  useEffect(()=>\n  {\n     if(status==='completed'&&!error)\n     {\n\n     }\n  },[status,error])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n   sendRequest({text:enteredText});\n  };\n\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status==='pending'&&<div className='centered'><LoadingSpinner /></div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState } from 'react';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm />}\n      <p>Comments...</p>\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__dE8qA\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\nimport { useParams ,Route,Link } from \"react-router-dom\";\nimport Comments from  '../components/comments/Comments';\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nconst QuoteDetails=()=>\n\n{   \n   const{sendRequest,status,data:loadedQuote,error} = useHttp(getSingleQuote,true);\n\n   const params=useParams();\n     \n   const {quoteId}=params;\n\n    useEffect(()=>\n    {\n       sendRequest(quoteId)\n    },[sendRequest,quoteId]);\n\n   if(status==='pending')\n   {\n      return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n      )\n   }\n   if(error)\n   {\n    return(\n        <p className=\"centered\">{error}</p>\n    )\n   }\n\n     if(!loadedQuote.text)\n     {\n        return (\n            <p>No quote found</p> \n        )\n     }\n\n    return(\n        <>\n        <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n        <div className=\"centered\"><Link className=\"btn--flat\" to={`/quotes/${params.quoteId}/comments`} >LOAD COMMENTS</Link></div>\n        <Route path={`/quotes/${params.quoteId}/comments`}>\n         <Comments />   \n        </Route>\n        </>\n    )\n\n}\n\nexport default QuoteDetails;"],"names":["props","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","enteredText","current","value","useEffect","submitFormHandler","event","preventDefault","text","className","classes","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","useState","isAddingComment","setIsAddingComment","onClick","author","getSingleQuote","loadedQuote","data","params","useParams","quoteId","to","path"],"sourceRoot":""}